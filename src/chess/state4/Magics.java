package chess.state4;

import sun.misc.Unsafe;
import chess.util.UnsafeUtil;


public final class Magics {

	public final static int rookBits = 13;
	public final static int bishopBits = 10;
	
	public final static long[] rookMagics = new long[]{
		3684919035575777771L, -8360335947336770830L, -5303582698334815102L, 8825839536023024557L, 
		-8536412315940270138L, 1814467135576779728L, 2029443097801486416L, -6237481702732958027L, 
		3630707615988831135L, -5783597953553911395L, -5526868044696735066L, -789765431891328293L, 
		-3321567604285162586L, 2844154758920570196L, 754854622178701630L, 1916421370628702090L, 
		4577187148247484685L, -3601544305000826906L, 6084130776420723903L, -3097900283583422545L, 
		3445246812994842219L, 6408022105838395285L, 7887178807043006788L, 3698230478320576816L, 
		-7212087372535043354L, -140555234686391349L, 6453842708328668075L, 2616106084253501281L, 
		-95531981263353159L, 1737147863126411276L, -1138541035109406176L, 7519773028245671657L, 
		-5673750679920805056L, -7843216748353286620L, -6792374294621658507L, 7098848491299399309L, 
		5433845348277119077L, -3859687020147559137L, 248439437463038587L, -3929104276675051282L, 
		-1194858933552921820L, -1426603716283140334L, 1327684814552389063L, 8848281336920942764L, 
		6221108124124253301L, 711053807061625837L, 7769216691534964900L, 7920847732504216590L, 
		8484513150015554275L, 1025381853358358578L, 1853050944528598093L, -239988272166290041L, 
		-3057070195551072044L, 1460970336499333731L, -2886885110691382544L, -6000391911649243064L, 
		-8907201008459653522L, -1258334503971996346L, 3698977519115354854L, -1479526273502275690L, 
		806489793952657242L, 910770967304519151L, -2836178793085402937L, -754954962541845742L, 
	};
	
	public final static long[] bishopMagics = new long[]{
		66087181118170470L, -1709495572912335440L, -8906863796069639179L, -1737310793190149664L, 
		1755975247494236492L, -8667806250388256867L, -7160235907804974041L, -256691538877156560L, 
		4876581673636434194L, -4227436367493542150L, 1675959996812323362L, -7871297173395812758L, 
		1289128310602737105L, 8806593441786837661L, 6994709614029907117L, -9063299091915745578L, 
		-5583017456436756799L, 3096925593623885924L, 5632128079336517276L, 967329894854188171L, 
		-360129648935264090L, 6864049589298666583L, -5398625935565511797L, -4827205018442801L, 
		6786264493720235817L, -1245825077565646365L, 1507986144410603363L, -4603839630788329374L, 
		-2816157435054517264L, 4146286140794688554L, -2933712248279183387L, -6286618542563605713L, 
		1818675039319297514L, 6691043256559319086L, 245034141048037226L, 7499181096115912706L, 
		-4656090659069134898L, -4674689129360726617L, 15845509745652433L, 6004901136718282187L, 
		-7172228794315295922L, -8633403346513871841L, 1830227475507992056L, -6066265417159874465L, 
		4236786690470367857L, 4607601123697344686L, -7255857875019282530L, -7928253254614869495L, 
		-1164056762184243598L, -7108579827187722715L, 8875034513272011920L, -3798570649497228896L, 
		2072199104155429311L, -3903402270834703032L, 8124387105930636121L, -3973769945910338487L, 
		-7542428319485901018L, 543175041496888800L, 7302701033371277713L, -1425632817751940812L, 
		-6463947060509600660L, 7514492745197841701L, 6805200304617544931L, -465492643806900987L, 
	};
	
	public final static long[][] rookMoveLookup;
	public final static long[][] bishopMoveLookup;
	
	/** pointer to raw memory allocation of bishop movement array*/
	public final static long bishopMovePointer;
	/** width of the bishop movement array*/
	public final static int bishopMoveWidth;
	/** pointer to raw memory allocation of bishop magics*/
	public final static long bishopMagicsPointer;
	
	public final static long rookMovePointer;
	public final static int rookMoveWidth;
	public final static long rookMagicsPointer;
	
	static {
		final int[] rookOffsets = new int[]{
				1,-1,8,-8
		};
		rookMoveLookup = HashGenerator.genMapping(Masks.rookMoves, rookOffsets, rookMagics, rookBits, HashGenerator.PIECE_TYPE_ROOK);
		
		final int[] bishopOffsets = new int[]{
				7,9,-7,-9
		};
		bishopMoveLookup = HashGenerator.genMapping(Masks.bishopMoves, bishopOffsets, bishopMagics, bishopBits, HashGenerator.PIECE_TYPE_BISHOP);

		//raw memory manipulations --------------------------------------
		
		final Unsafe u = UnsafeUtil.getUnsafe();
		
		//raw memory bishop magics
		bishopMagicsPointer = u.allocateMemory(bishopMagics.length*8);
		for(int a = 0; a < bishopMagics.length; a++){
			u.putLong(bishopMagicsPointer + a*8, bishopMagics[a]);
		}
		
		//raw memory bishop moves
		bishopMoveWidth = bishopMoveLookup[0].length;
		bishopMovePointer = u.allocateMemory(bishopMoveLookup.length*bishopMoveLookup[0].length*8);
		for(int a = 0; a < bishopMoveLookup.length; a++){
			for(int q = 0; q < bishopMoveLookup[0].length; q++){
				u.putLong(bishopMovePointer+(a*bishopMoveWidth+q)*8, bishopMoveLookup[a][q]);
			}
		}
		
		//raw memory rook moves
		rookMagicsPointer = u.allocateMemory(rookMagics.length*8);
		for(int a = 0; a < rookMagics.length; a++){
			u.putLong(rookMagicsPointer + a*8, rookMagics[a]);
		}
		rookMoveWidth = rookMoveLookup[0].length;
		rookMovePointer = u.allocateMemory(rookMoveLookup.length*rookMoveLookup[0].length*8);
		for(int a = 0; a < rookMoveLookup.length; a++){
			for(int q = 0; q < rookMoveLookup[0].length; q++){
				u.putLong(rookMovePointer+(a*rookMoveWidth+q)*8, rookMoveLookup[a][q]);
			}
		}
	}
}
